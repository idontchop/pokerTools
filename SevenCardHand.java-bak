package pokerTools;

/*
 * Still an old coding attempt.  But useable for now.  Basically takes 21 combos of 7 cards and passes it to super to get value
 * Ideally, we'd code some super math using bits to find the value without doing 21 pass throughs.  But the preflop equity matrix
 * is priority. Then we can decide if speed of this is necessary to improve
 */

/*     OLD NOTES
 * ok
 * These variables are hard coded into fivecard hand:
 * card[] hand = new card[5]
 * int value
 * final private int VALUEMULTIPLE
 * 
 * functions we shouldn't have to override:
 * isflush... etc -- but will have to make sure hand[] is set with the 5 cards we want to test
 * printValue()
 * getValue()
 * sortbyrank() -- follows same logic as isflush...
 * printHandValue() -- since we always want the value of the best five, this will always work, this is method we really want anyway
 * valtostring() -- only helper
 * 
 * functions we will have to override:
 * getHandString() done
 * print() done
 * addCard(...) done
 * determineHandValue() -- this is the important one. It will basically run through all 21 combos passing the 5 cards to the super.determineHandValue(), then
 * 							store the proper 5 cards in the super's hand[].
 */



public class SevenCardHand extends FiveCardHand {
	Card[] hand7Cards = new Card[7];
	/* super's instance variables
	 * hand[5]
	 * int value
	 */
	
	public SevenCardHand (Card a, Card b, Card c, Card d, Card e, Card f, Card g) {
		addCard(a,b,c,d,e,f,g);
	}
	
	public SevenCardHand () {
		
	}
	
	int determineHandValue() {
		Card[] bestFiveCard = new Card[5];
		int bestFiveCardValue=0, testValue;
		FiveCardHand FiveCard;
		int a=0,b=1,c=2,d=3,e=4;
		
		if (checkSevenCards() == false) {
			return -1;
		}

		for(;a<b;a++){
			for(b=a+1;b<c;b++){
				for(c=b+1;c<d;c++){
					for(d=c+1;d<e;d++){
						for(e=d+1;e<7;e++){
							FiveCard = new FiveCardHand();
							if(FiveCard.addCard(new Card[] {hand7Cards[a],hand7Cards[b],hand7Cards[c],hand7Cards[d],hand7Cards[e]})==-1) { System.out.print("boom"); }
							if((testValue=FiveCard.getValue()) > bestFiveCardValue) { 
								bestFiveCardValue = testValue;
								 // update bestFiveCard which will be copied to hand at end
								bestFiveCard[0] = new Card(hand7Cards[a].getCardStr());
								bestFiveCard[1] = new Card(hand7Cards[b].getCardStr());
								bestFiveCard[2] = new Card(hand7Cards[c].getCardStr());
								bestFiveCard[3] = new Card(hand7Cards[d].getCardStr());
								bestFiveCard[4] = new Card(hand7Cards[e].getCardStr());
								
							} 
						}
					}
				}
			}
		}
		
		value = bestFiveCardValue;
		for(int cc=0; cc<5;cc++) {
			hand[cc] = bestFiveCard[cc];
		}
		
		return value;
		
		
	}
	
	boolean checkSevenCards() {
		
		for (int cc = 0; cc<7; cc++ ) {
			if (hand7Cards[cc] == null) return false;
		}
		return true;
	}
	
	int addCard(Card card) {
		
		for(int cc = 0; cc<7; cc++) {
			if (hand7Cards[cc]==null) {
				hand7Cards[cc] = card;
				determineHandValue();
				return 0;
			}
		}
		return -1;
	}
	
	int addCard(Card A, Card B, Card C, Card D, Card E) {
		/* must override this one to make sure nothing goes boom.
		 * But using this one will be incomplete and should always return -1
		 */
		
		hand7Cards[0] = A;
		hand7Cards[1] = B;
		hand7Cards[2] = C;
		hand7Cards[3] = D;
		hand7Cards[4] = E;
		return -1;
	}

	int addCard(Card A, Card B, Card C, Card D, Card E, Card F, Card G) {
		/*
		 * will check for null since if we are using this method, we probably want a clean hand 
		 */
		
		for (int cc = 0; cc<7; cc++) {
			if (hand7Cards[cc] != null) return -1;
		}
		
		hand7Cards[0] = A;
		hand7Cards[1] = B;
		hand7Cards[2] = C;
		hand7Cards[3] = D;
		hand7Cards[4] = E;
		hand7Cards[5] = F;
		hand7Cards[6] = G;
		determineHandValue();
		return value;
	}
	
	int addCard(Card[] card) {
		
		for (int cc = 0; cc<card.length;cc++) {
			for (int c = 0; c<hand7Cards.length;c++) {
				if (hand7Cards[c] != null) continue;
				hand7Cards[c] = card[cc];
				break;
			}
		}
		
		determineHandValue();
		return value;
	}

	void print() {
		for (Card c : hand7Cards) {
			if (c == null) System.out.print("null");
			else System.out.printf("%c%c", c.rank.getChar(),c.suit.getChar());
		}
	}
	
	void print5CardHand() {
		sortbyrank();
		for (Card c: hand) {
			if (c==null) System.out.print("null");
			else System.out.printf("%c%c", c.rank.getChar(),c.suit.getChar());
		}
	}
	
	String getHandString() {
		String hands = "";
		for (int cc = 0; cc < 7; cc++) {
			if (hand7Cards[cc] == null) hands = hands + "null";
			else hands = hands + String.format("%c%c", hand7Cards[cc].rank.getChar(),hand7Cards[cc].suit.getChar());
			if (cc!=6) hands = hands + " ";
		}
		return hands;
	}
}
